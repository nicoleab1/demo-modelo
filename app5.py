
import streamlit as st
import numpy as np
import pandas as pd

# ======================
# PANTALLA 1: INICIO
# ======================
def pantalla_inicio():
    """Pantalla de inicio: nombre de la organizaci√≥n y tipo de entidad"""
    st.title("Bienvenido a la herramienta de planificaci√≥n municipal 1")

    # Nombre de la organizaci√≥n
    st.session_state.org_name = st.text_input("Nombre de la organizaci√≥n/entidad:")

    # Tipo de entidad (sin valor en blanco)
    opciones_tipo = ["Local", "Auton√≥mica", "Provincial o conjunto de municipios"]
    if not st.session_state.tipo_entidad:
        st.session_state.tipo_entidad = opciones_tipo[0]
    st.session_state.tipo_entidad = st.selectbox(
        "Tipo de entidad:",
        opciones_tipo,
        index=opciones_tipo.index(st.session_state.tipo_entidad)
    )

    # Prioridades (selecci√≥n con un solo clic)
    prioridades_posibles = [
        "Agua", "Energ√≠a", "Cambio clim√°tico", "Emisiones", "Econom√≠a circular",
        "Gobernanza", "Modelo de ciudad", "Vivienda", "Movilidad sostenible",
        "Biodiversidad", "Desigualdades", "Digitalizaci√≥n", "Datos"
    ]

    # Usamos checkboxes para selecci√≥n de un clic
    seleccionadas = []
    st.write("Selecciona las prioridades de la entidad:")
    cols = st.columns(4)
    for i, prioridad in enumerate(prioridades_posibles):
        if cols[i % 4].checkbox(prioridad, prioridad in st.session_state.prioridades):
            seleccionadas.append(prioridad)
    st.session_state.prioridades = seleccionadas

    # Bot√≥n continuar
    if st.button("Continuar ‚û°Ô∏è"):
        st.session_state.step = 2


# ======================
# PANTALLA 2: SITUACI√ìN ACTUAL
# ======================
def pantalla_prioridades_actuales():
    """Pantalla 2: visualizaci√≥n de la situaci√≥n actual de las prioridades"""
    st.title(f"{st.session_state.org_name} - Situaci√≥n actual")

    st.subheader("Tipo de entidad: " + st.session_state.tipo_entidad)

    st.markdown("---")
    st.subheader("üìä Situaci√≥n actual de las prioridades seleccionadas")

    # Mockup de estado aleatorio
    estados_posibles = ["verde", "amarillo", "rojo"]
    descripciones = {"verde": "Sobresaliente", "amarillo": "Satisfactorio", "rojo": "Necesita mejorar"}
    colores = {"verde": "#4CAF50", "amarillo": "#FFC107", "rojo": "#F44336"}

    # Guardamos los estados aleatorios una sola vez
    if "estados_prioridades" not in st.session_state:
        st.session_state.estados_prioridades = {
            prioridad: np.random.choice(estados_posibles) for prioridad in st.session_state.prioridades
        }

    # Mostrar prioridades en cuadr√≠cula
    n_cols = 4
    prioridades = st.session_state.prioridades
    n_prioridades = len(prioridades)
    
    for i in range(0, n_prioridades, n_cols):
        cols = st.columns(n_cols)
        for j, prioridad in enumerate(prioridades[i:i+n_cols]):
            estado = st.session_state.estados_prioridades.get(prioridad, "verde")
            with cols[j]:
                st.markdown(
                    f"""
                    <div style="text-align:center; margin-bottom:10px;">
                        <div style="width:70px; height:70px; border-radius:50%; background-color:{colores[estado]}; margin:auto;"></div>
                        <p style="margin:5px 0 0 0; font-weight:bold;">{prioridad}</p>
                        <p style="margin:0; font-size:0.9em;">{descripciones[estado]}</p>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

    st.markdown("---")
    col1, col2 = st.columns(2)
    if col1.button("‚¨ÖÔ∏è Volver"):
        st.session_state.step = 1
    if col2.button("‚û°Ô∏è Crear plan"):
        st.session_state.step = 3


# ======================
# PANTALLA 3: CREAR PLAN
# ======================
def pantalla_crear_plan():
    """Pantalla 3: creaci√≥n del plan"""
    st.title("Crea un nuevo plan")

    # Campos del plan
    nombre_plan = st.text_input("Nombre del plan:", st.session_state.plan.get("nombre", ""))
    descripcion_plan = st.text_area("Descripci√≥n del plan:", st.session_state.plan.get("descripcion", ""))
    horizonte_plan = st.selectbox(
        "Horizonte temporal:",
        ["2025", "2030", "2040", "2050"],
        index=0
    )

    # Botones
    col1, col2 = st.columns(2)
    if col1.button("‚¨ÖÔ∏è Volver a prioridades"):
        st.session_state.step = 2

    if col2.button("Guardar y continuar ‚û°Ô∏è"):
        if not nombre_plan:
            st.warning("Por favor escribe el nombre del plan antes de continuar.")
        else:
            st.session_state.plan["nombre"] = nombre_plan
            st.session_state.plan["descripcion"] = descripcion_plan
            st.session_state.plan["horizonte"] = horizonte_plan
            st.success("‚úÖ Plan guardado correctamente.")
            st.session_state.step = 4


# ======================
# PANTALLA 4: ACTUACIONES
# ======================
def pantalla_actuaciones():
    st.title("A√±adir actuaci√≥n")

    # Asegurarnos de que exista la lista de actuaciones
    if "actuaciones" not in st.session_state:
        st.session_state.actuaciones = []
    if "areas_sel" not in st.session_state:
        st.session_state.areas_sel = []
    if "tags_sel" not in st.session_state:
        st.session_state.tags_sel = []

    # Nombre de la actuaci√≥n
    nombre_act = st.text_input("Nombre de la actuaci√≥n:")

    # Selecci√≥n de √°reas
    areas = st.multiselect(
        "√Åreas relacionadas:",
        st.session_state.prioridades,
        default=st.session_state.areas_sel
    )

    # Guardar la selecci√≥n actual en session_state
    st.session_state.areas_sel = areas

    # Diccionario que mapea prioridades a tags
    tags_por_area = {
        "Agua": ["Riego de zonas verdes", "Agua recuperada y regenerada", "Cantidad total de agua"],
        "Energ√≠a": ["Consumo final de combustibles", "Producci√≥n local EE.RR", "Consumo final de energ√≠a el√©ctrica", 
                    "Eficiencia energ√©tica de las viviendas", "Medidas de ahorro y eficiencia energ√©tica", "Alumbrado urbano"],
        "Cambio clim√°tico": ["Inundaciones", "Seguridad"],
        "Econom√≠a circular": ["Eficiencia de la estructura y log√≠stica de la recogida separativa de residuos",
                              "IoT (smart cities)", "Control y vigilancia del tr√°fico", 
                              "Infraestructura para el soporte de la electrificaci√≥n de las flotas",
                              "Movilidad compartida", "Econom√≠a colaborativa"],
        "Econom√≠a": ["Actividad comercial, de ocio, hosteler√≠a y turismo (servicios)",
                     "Adecuaci√≥n del perfil de la poblaci√≥n disponible a la demanda de empleo"],
        "Gobernanza": ["Calidad de los planes y pol√≠ticas", "Acceso a informaci√≥n", "Ineficiencias internas",
                       "Capacitaci√≥n y formaci√≥n para el personal p√∫blico", "Colaboraci√≥n efectiva",
                       "Participaci√≥n efectiva"],
        "Datos": ["Accesibilidad de la informaci√≥n p√∫blica", "Calidad de la informaci√≥n y datos puestos a disposici√≥n de la poblaci√≥n",
                  "Capacidad tecnol√≥gica y disponibilidad de medios de la entidad"],
        "Modelo de ciudad": ["Regeneraci√≥n y rehabilitaci√≥n", "Calidad de las infraestructuras", "Calidad de la planificaci√≥n urbana",
                             "Patrimonio cultural", "Suelo destinado a usos comerciales", "Suelo destinado a usos residenciales",
                             "Distribuci√≥n equilibrada de los usos del suelo", "Selecci√≥n de especies adaptadas a las condiciones clim√°ticas",
                             "Servicios socio-culturales", "Planificaci√≥n para la biodiversidad urbana", "Uso servicios culturales",
                             "Mantenimiento de los equipamientos e infraestructuras", "Estado del parque edificatorio p√∫blico",
                             "Especies aut√≥ctonas", "Cubiertas verdes y jardines verticales", "Huertos urbanos",
                             "Zonas deportivas", "Espacios p√∫blicos de ocio", "Calidad del espacio p√∫blico",
                             "Suelo destinado a zonas verdes y espacios abiertos"],
        "Vivienda": ["Poblaci√≥n con acceso al alquiler", "Poblaci√≥n con acceso a compra", "Parque de vivienda disponible"],
        "Movilidad sostenible": ["Viario por el que pueden circular peatones", "Viario para la circulaci√≥n de bicicletas",
                                 "Infraestructuras de transporte p√∫blico colectivo", "Aparcamiento",
                                 "Separaci√≥n de las IF para el tr√°fico motorizado de otros modos de transporte",
                                 "Caminabilidad", "Accesibilidad f√≠sica a carriles bici",
                                 "Desplazamientos en otros modos de micromovilidad",
                                 "Accesibilidad f√≠sica a transporte p√∫blico", "Interconexi√≥n entre zonas",
                                 "Facilidad de desplazamiento en transporte p√∫blico", "Limitaci√≥n del tr√°fico en n√∫cleos urbanos",
                                 "Seguridad vial", "Nodos multimodales", "Parque de vivienda disponible para alquiler"],
        "Biodiversidad": ["Gesti√≥n adecuada y protecci√≥n de las zonas naturales"],
        "Desigualdades": ["Desigualdades educativas", "Desigualdades espaciales", "Desigualdades en cuidados",
                          "Desigualdades culturales", "Poblaci√≥n en situaci√≥n econ√≥mica vulnerable", "Carga del cuidado"],
        "Digitalizaci√≥n": ["Brecha digital", "Barreras a la accesibilidad universal"]
    }

    # Construir lista de tags seg√∫n √°reas seleccionadas
    tags = []
    for area in areas:
        tags.extend(tags_por_area.get(area, []))
    tags = sorted(set(tags))

    # Selecci√≥n de tags activados
    tags_sel = st.multiselect(
        "Selecciona los tags activados:",
        tags,
        default=st.session_state.tags_sel
    )
    st.session_state.tags_sel = tags_sel

    # Sliders
    esfuerzo = st.slider("Esfuerzo (0=peque√±o presupuesto, 100=gran presupuesto)", 0, 100, 50)
    importancia = st.slider("Importancia estrat√©gica (0=baja, 100=alta)", 0, 100, 50)
    escala = st.slider("Escala geogr√°fica (0=local, 100=toda la entidad)", 0, 100, 50)

    # Botones
    col1, col2 = st.columns(2)
    if col1.button("Guardar actuaci√≥n"):
        st.session_state.actuaciones.append({
            "nombre": nombre_act,
            "areas": areas,
            "tags": tags_sel,
            "esfuerzo": esfuerzo,
            "importancia": importancia,
            "escala": escala
        })
        st.success(f"Actuaci√≥n '{nombre_act}' a√±adida.")
        # limpiar selecci√≥n
        st.session_state.areas_sel = []
        st.session_state.tags_sel = []
        st.rerun()

    if col2.button("Simula el impacto ‚û°Ô∏è"):
        st.session_state.step = st.session_state.get("step", 4) + 1

    if st.button("‚¨ÖÔ∏è Atr√°s"):
        st.session_state.step = max(1, st.session_state.get("step", 4) - 1)

    # Mostrar actuaciones registradas
    if st.session_state.actuaciones:
        st.subheader("Actuaciones registradas")
        st.write(pd.DataFrame(st.session_state.actuaciones))

def pantalla_dashboard():
    st.title(f"{st.session_state.org_name} - Resultados del plan")
    
    # ---------- Puntuaci√≥n global ----------
    st.subheader("üìà Puntuaci√≥n global del plan")
    plan_score = np.random.randint(1, 101)
    st.markdown(f"""
    <div style="display:flex; justify-content:center; align-items:center; margin-bottom:20px;">
        <svg width="150" height="150">
            <circle cx="75" cy="75" r="70" fill="#eee" />
            <circle cx="75" cy="75" r="70" fill="none" stroke="#4CAF50" stroke-width="20"
                    stroke-dasharray="{plan_score*4.4} 440" transform="rotate(-90 75 75)" />
            <text x="50%" y="50%" text-anchor="middle" dy="7" font-size="20" font-weight="bold">{plan_score}</text>
        </svg>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # ---------- Situaci√≥n actual por prioridades ----------
    st.subheader("üìä Situaci√≥n actual por prioridades")
    colores_estado = {"verde": "#4CAF50", "amarillo": "#FFC107", "rojo": "#F44336"}
    descripciones = {"verde": "Sobresaliente", "amarillo": "Satisfactorio", "rojo": "Necesita mejorar"}
    
    prioridades = st.session_state.prioridades
    n_cols = 4
    n_prioridades = len(prioridades)
    
    for i in range(0, n_prioridades, n_cols):
        cols = st.columns(n_cols)
        for j, prioridad in enumerate(prioridades[i:i+n_cols]):
            estado = st.session_state.estados_prioridades.get(prioridad, "verde")
            with cols[j]:
                st.markdown(f"""
                <div style="text-align:center; margin-bottom:10px;">
                    <div style="width:70px; height:70px; border-radius:50%; background-color:{colores_estado[estado]}; margin:auto;"></div>
                    <p style="margin:5px 0 0 0; font-weight:bold;">{prioridad}</p>
                    <p style="margin:0; font-size:0.9em;">{descripciones[estado]}</p>
                </div>
                """, unsafe_allow_html=True)
    
    st.subheader("üåü Impactos esperados por prioridad")
    for i in range(0, n_prioridades, n_cols):
        cols = st.columns(n_cols)
        for j, prioridad in enumerate(prioridades[i:i+n_cols]):
            impacto = np.random.randint(0, 101)
            with cols[j]:
                st.markdown(f"""
                <div style="text-align:center; margin-bottom:10px;">
                    <svg width="70" height="70">
                        <circle cx="35" cy="35" r="32" fill="#eee" />
                        <circle cx="35" cy="35" r="32" fill="none" stroke="#4CAF50" stroke-width="6"
                                stroke-dasharray="{impacto*2.01} 201" transform="rotate(-90 35 35)" />
                        <text x="50%" y="50%" text-anchor="middle" dy="5" font-size="12">{impacto}</text>
                    </svg>
                    <p style="margin:2px 0 0 0; font-weight:bold;">{prioridad}</p>
                </div>
                """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # ---------- Cadenas de influencia ----------
    st.subheader("üîó Ejemplos de cadenas de influencia (6 pasos)")
    import random
    cadenas_simuladas = []

    # Tomar las actuaciones y sus tags
    for act in st.session_state.actuaciones:
        for tag in act['tags']:
            cadena = [
                f"{act['nombre']}",
                f"Influencia sobre √°rea: {tag}",
                f"Efecto intermedio 1",
                f"Efecto intermedio 2",
                f"Efecto intermedio 3",
                f"KPI final: {tag}"
            ]
            cadenas_simuladas.append(cadena)

    # Mostrar hasta 3 cadenas
    if cadenas_simuladas:
        for cadena in random.sample(cadenas_simuladas, min(3, len(cadenas_simuladas))):
            # Dibujar cada paso como c√≠rculo con l√≠nea de conexi√≥n
            html = '<div style="display:flex; align-items:center; justify-content:start; margin-bottom:10px;">'
            for i, paso in enumerate(cadena):
                html += f"""
                    <div style="
                        width:60px; height:60px; border-radius:50%; background-color:#4CAF50;
                        display:flex; align-items:center; justify-content:center;
                        color:white; font-size:10px; text-align:center; padding:5px; margin-right:5px;">
                        {paso}
                    </div>
                """
                if i < len(cadena) - 1:
                    html += '<div style="margin-right:5px;">‚Üí</div>'
            html += '</div>'
            st.markdown(html, unsafe_allow_html=True)
    else:
        st.info("No hay actuaciones registradas para generar cadenas de ejemplo.")
    
    # ---------- KPIs m√°s impactados ----------
    st.markdown("---")
    st.subheader("üìå KPIs m√°s impactados")
    if st.button("Ver KPIs m√°s impactados"):
        if cadenas_simuladas:
            kpis = [c[-1] for c in cadenas_simuladas]
            st.write(list(set(kpis)))  # mostrar KPIs finales √∫nicos
        else:
            st.info("No hay KPIs para mostrar.")


# ======================
# INICIALIZACI√ìN DEL ESTADO
# ======================
if "step" not in st.session_state:
    st.session_state.step = 1
if "org_name" not in st.session_state:
    st.session_state.org_name = ""
if "tipo_entidad" not in st.session_state:
    st.session_state.tipo_entidad = ""
if "prioridades" not in st.session_state:
    st.session_state.prioridades = []
if "plan" not in st.session_state:
    st.session_state.plan = {}
if "estados_prioridades" not in st.session_state:
    st.session_state.estados_prioridades = {}
if "actuaciones" not in st.session_state:
    st.session_state.actuaciones = []


# ======================
# CONTROL DE PANTALLAS
# ======================
if st.session_state.step == 1:
    pantalla_inicio()
elif st.session_state.step == 2:
    pantalla_prioridades_actuales()
elif st.session_state.step == 3:
    pantalla_crear_plan()
elif st.session_state.step == 4:
    pantalla_actuaciones()
elif st.session_state.step == 5:
    pantalla_dashboard()  # <-- aqu√≠ llamamos al dashboard
