import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# ==============================
# Inicializaci√≥n de estado
# ==============================
if "step" not in st.session_state:
    st.session_state.step = 1
if "org_name" not in st.session_state:
    st.session_state.org_name = ""
if "entidad" not in st.session_state:
    st.session_state.entidad = ""
if "prioridades" not in st.session_state:
    st.session_state.prioridades = []
if "plan" not in st.session_state:
    st.session_state.plan = {}
if "actuaciones" not in st.session_state:
    st.session_state.actuaciones = []

# ==============================
# Funciones para navegaci√≥n
# ==============================
def next_step():
    st.session_state.step += 1

def prev_step():
    st.session_state.step -= 1

# ==============================
# Pantalla 1 - Inicio
# ==============================
def pantalla_inicio():
    st.title("Bienvenido al simulador de impacto")
    st.write("Por favor, completa la informaci√≥n inicial:")

    org_name = st.text_input("Nombre de la entidad:", st.session_state.org_name)
    entidad = st.selectbox("Tipo de entidad:", ["Local", "Auton√≥mica", "Provincial o conjunto de municipios"], index=0)
    prioridades = st.multiselect(
        "Selecciona las prioridades de la entidad:",
        ["Agua", "Energ√≠a", "Cambio clim√°tico", "Emisiones", "Econom√≠a circular", "Gobernanza", "Modelo de ciudad", "Vivienda", "Movilidad sostenible", "Biodiversidad", "Desigualdades", "Digitalizaci√≥n", "Datos"],
        default=st.session_state.prioridades
    )

    if st.button("Continuar ‚û°Ô∏è") and org_name and entidad:
        st.session_state.org_name = org_name
        st.session_state.entidad = entidad
        st.session_state.prioridades = prioridades
        next_step()

# ==============================
# Pantalla 2 - Datos de la entidad
# ==============================
def pantalla_entidad():
    st.title(f"Entidad: {st.session_state.org_name}")
    st.subheader("Datos del municipio")
    st.write("üìç Ubicaci√≥n: Comunidad de Madrid")
    st.write("üë• Poblaci√≥n: 118,000 habitantes (Alcobendas)")
    st.write("üåç Regi√≥n: Zona Norte de Madrid")

    st.subheader("Situaci√≥n actual de prioridades")
    # Colores de ejemplo
    colores = {"Agua": "green", "Energ√≠a": "red", "Econom√≠a circular": "yellow",
               "Movilidad sostenible": "green", "Biodiversidad": "red",
               "Gobernanza de datos": "yellow", "Reducci√≥n de desigualdades": "green"}

    for pr in st.session_state.prioridades:
        color = colores.get(pr, "gray")
        st.markdown(f"**{pr}**: <span style='color:{color}'>‚óè</span>", unsafe_allow_html=True)

    if st.button("Crea un plan para insertar actuaciones ‚û°Ô∏è"):
        next_step()

# ==============================
# Pantalla 3 - Creaci√≥n de plan
# ==============================
def pantalla_plan():
    st.title("Creaci√≥n de plan estrat√©gico")
    plan_name = st.text_input("Nombre del plan:")
    descripcion = st.text_area("Descripci√≥n del plan:")
    horizonte = st.selectbox("Horizonte temporal:", ["2025", "2030", "2040", "2050"])

    if st.button("Guardar plan y a√±adir actuaciones ‚û°Ô∏è") and plan_name:
        st.session_state.plan = {
            "nombre": plan_name,
            "descripcion": descripcion,
            "horizonte": horizonte
        }
        next_step()

    if st.button("‚¨ÖÔ∏è Atr√°s"):
        prev_step()

# ==============================
# Pantalla 4 - Actuaciones
# ==============================
def pantalla_actuaciones():
    st.title("A√±adir actuaci√≥n")

    # Nombre de la actuaci√≥n
    nombre_act = st.text_input("Nombre de la actuaci√≥n:")

    # Selecci√≥n de √°reas
    areas = st.multiselect(
        "√Åreas relacionadas:", 
        st.session_state.prioridades
    )

    # Diccionario que mapea prioridades a tags (capitalizaci√≥n normal)
    tags_por_area = {
        "Agua": ["Riego de zonas verdes", "Agua recuperada y regenerada", "Cantidad total de agua"],
        "Energ√≠a": ["Consumo final de combustibles", "Producci√≥n local EE.RR", "Consumo final de energ√≠a el√©ctrica", 
                    "Eficiencia energ√©tica de las viviendas", "Medidas de ahorro y eficiencia energ√©tica", "Alumbrado urbano"],
        "Cambio clim√°tico": ["Inundaciones", "Seguridad"],
        "Econom√≠a circular": ["Eficiencia de la estructura y log√≠stica de la recogida separativa de residuos",
                              "IoT (smart cities)", "Control y vigilancia del tr√°fico", 
                              "Infraestructura para el soporte de la electrificaci√≥n de las flotas",
                              "Movilidad compartida", "Econom√≠a colaborativa"],
        "Econom√≠a": ["Actividad comercial, de ocio, hosteler√≠a y turismo (servicios)",
                     "Adecuaci√≥n del perfil de la poblaci√≥n disponible a la demanda de empleo"],
        "Gobernanza": ["Calidad de los planes y pol√≠ticas", "Acceso a informaci√≥n", "Ineficiencias internas",
                       "Capacitaci√≥n y formaci√≥n para el personal p√∫blico", "Colaboraci√≥n efectiva",
                       "Participaci√≥n efectiva"],
        "Datos": ["Accesibilidad de la informaci√≥n p√∫blica", "Calidad de la informaci√≥n y datos puestos a disposici√≥n de la poblaci√≥n",
                  "Capacidad tecnol√≥gica y disponibilidad de medios de la entidad"],
        "Modelo de ciudad": ["Regeneraci√≥n y rehabilitaci√≥n", "Calidad de las infraestructuras", "Calidad de la planificaci√≥n urbana",
                             "Patrimonio cultural", "Suelo destinado a usos comerciales", "Suelo destinado a usos residenciales",
                             "Distribuci√≥n equilibrada de los usos del suelo", "Selecci√≥n de especies adaptadas a las condiciones clim√°ticas",
                             "Servicios socio-culturales", "Planificaci√≥n para la biodiversidad urbana", "Uso servicios culturales",
                             "Mantenimiento de los equipamientos e infraestructuras", "Estado del parque edificatorio p√∫blico",
                             "Especies aut√≥ctonas", "Cubiertas verdes y jardines verticales", "Huertos urbanos",
                             "Zonas deportivas", "Espacios p√∫blicos de ocio", "Calidad del espacio p√∫blico",
                             "Suelo destinado a zonas verdes y espacios abiertos"],
        "Vivienda": ["Poblaci√≥n con acceso al alquiler", "Poblaci√≥n con acceso a compra", "Parque de vivienda disponible"],
        "Movilidad sostenible": ["Viario por el que pueden circular peatones", "Viario para la circulaci√≥n de bicicletas",
                                 "Infraestructuras de transporte p√∫blico colectivo", "Aparcamiento",
                                 "Separaci√≥n de las IF para el tr√°fico motorizado de otros modos de transporte",
                                 "Caminabilidad", "Accesibilidad f√≠sica a carriles bici",
                                 "Desplazamientos en otros modos de micromovilidad",
                                 "Accesibilidad f√≠sica a transporte p√∫blico", "Interconexi√≥n entre zonas",
                                 "Facilidad de desplazamiento en transporte p√∫blico", "Limitaci√≥n del tr√°fico en n√∫cleos urbanos",
                                 "Seguridad vial", "Nodos multimodales", "Parque de vivienda disponible para alquiler"],
        "Biodiversidad": ["Gesti√≥n adecuada y protecci√≥n de las zonas naturales"],
        "Desigualdades": ["Desigualdades educativas", "Desigualdades espaciales", "Desigualdades en cuidados",
                          "Desigualdades culturales", "Poblaci√≥n en situaci√≥n econ√≥mica vulnerable", "Carga del cuidado"],
        "Digitalizaci√≥n": ["Brecha digital", "Barreras a la accesibilidad universal"]
    }

    # Construir lista de tags seg√∫n √°reas seleccionadas
    tags = []
    for area in areas:
        tags.extend(tags_por_area.get(area, []))

    # Selecci√≥n de tags activados
    tags_sel = st.multiselect("Selecciona los tags activados:", tags)

    # Sliders
    esfuerzo = st.slider("Esfuerzo (0=peque√±o presupuesto, 100=gran presupuesto)", 0, 100, 50)
    importancia = st.slider("Importancia estrat√©gica (0=baja, 100=alta)", 0, 100, 50)
    escala = st.slider("Escala geogr√°fica (0=local, 100=toda la entidad)", 0, 100, 50)

    # Botones
    col1, col2 = st.columns(2)
    if col1.button("A√±adir actuaci√≥n"):
        st.session_state.actuaciones.append({
            "nombre": nombre_act,
            "areas": areas,
            "tags": tags_sel,
            "esfuerzo": esfuerzo,
            "importancia": importancia,
            "escala": escala
        })
        st.success(f"Actuaci√≥n '{nombre_act}' a√±adida.")

    if col2.button("Simula el impacto ‚û°Ô∏è"):
        next_step()

    if st.button("‚¨ÖÔ∏è Atr√°s"):
        prev_step()

    # Mostrar actuaciones registradas
    if st.session_state.actuaciones:
        st.subheader("Actuaciones registradas")
        st.write(pd.DataFrame(st.session_state.actuaciones))


# ==============================
# Pantalla 5 - Dashboard resumen
# ==============================
def pantalla_dashboard():
    st.title(f"{st.session_state.org_name}")

    st.subheader("üéØ Impacto del plan")
    # Valor total de impacto del plan (mockup)
    progreso = np.random.randint(50, 100)  # 0-100%
    
    # Gr√°fico de anillo
    fig, ax = plt.subplots(figsize=(4, 4))
    ax.pie(
        [progreso, 100 - progreso],
        colors=["#4CAF50", "#E0E0E0"],
        startangle=90,
        counterclock=False,
        wedgeprops={"width":0.3, "edgecolor":"white"}
    )
    ax.text(0, 0, f"{progreso}", ha="center", va="center", fontsize=24, fontweight="bold")
    ax.set_aspect("equal")
    
    st.pyplot(fig)

    st.subheader("üìä Prioridades: situaci√≥n actual vs impacto esperado")
    st.write("Situaci√≥n actual: colores verde/amarillo/rojo (mockup)")
    st.write("Impacto esperado: variaci√≥n simulada (mockup)")

    st.subheader("üîç Detalle por √°reas")
    area = st.selectbox("Selecciona un √°rea para ver detalles:", categorias)
    if area:
        st.write(f"Proyectos relacionados con {area}:")
        for act in st.session_state.actuaciones:
            if area in act["areas"]:
                st.write(f"- {act['nombre']} (KPIs simulados, ODS relacionados, etc.)")

    st.subheader("üìå KPIs m√°s impactados (mockup)")
    kpis = ["KPI_Aire", "KPI_Movilidad", "KPI_Desigualdades"]
    intensidades = np.random.randn(len(kpis))
    df_kpi = pd.DataFrame({"KPI": kpis, "Impacto": intensidades})
    st.bar_chart(df_kpi.set_index("KPI"))

    kpi_sel = st.selectbox("Elige un KPI para ver proyectos relacionados:", kpis)
    if kpi_sel:
        st.write(f"Proyectos que m√°s afectan a {kpi_sel}:")
        for act in st.session_state.actuaciones:
            st.write(f"- {act['nombre']}")

    if st.button("‚¨ÖÔ∏è Atr√°s"):
        prev_step()

# ==============================
# Flujo principal
# ==============================
if st.session_state.step == 1:
    pantalla_inicio()
elif st.session_state.step == 2:
    pantalla_entidad()
elif st.session_state.step == 3:
    pantalla_plan()
elif st.session_state.step == 4:
    pantalla_actuaciones()
elif st.session_state.step == 5:
    pantalla_dashboard()
